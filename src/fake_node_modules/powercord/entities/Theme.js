const { resolveCompiler } = require('powercord/compilers');
const { createElement } = require('powercord/util');

const Updatable = require('./Updatable');

class Theme extends Updatable {
  constructor (themeID, manifest) {
    const styleManager = typeof powercord !== 'undefined' ? powercord.styleManager : global.sm;
    super(styleManager.themesDir, themeID);
    this.compiler = resolveCompiler(manifest.effectiveTheme);
    this.manifest = manifest;
    this.applied = false;
  }

  apply () {
    if (!this.applied) {
      this.applied = true;
      const style = createElement('style', {
        id: `theme-${this.entityID}`,
        'data-powercord': true,
        'data-theme': true
      });
      document.head.appendChild(style);
      this._doCompile = async () => {
        style.innerHTML = await this.compiler.compile();
      };

      this.compiler.enableWatcher();
      this.compiler.on('src-update', this._doCompile);
      return this._doCompile();
    }
  }

  remove () {
    if (this.applied) {
      this.applied = false;
      this.compiler.off('src-update', this._doCompile);
      document.getElementById(`theme-${this.entityID}`).remove();
      this.compiler.disableWatcher();
    }
  }

  async _getUpdateVersion () {
    const latest = await this._getUpdateCommits();
    if (latest[0]) {
      try {
        const gitManifest = await PowercordNative.exec(`git show ${latest[0].id}:powercord_manifest.json`, {
          cwd: this.entityPath,
          timeout: TIMEOUT
        }).then(({ stdout }) => stdout.toString());

        const manifest = JSON.parse(gitManifest);
        return manifest?.version ?? null;
      } catch (e) {
        return null;
      }
    } else {
      return null;
    }
  }
}

module.exports = Theme;
